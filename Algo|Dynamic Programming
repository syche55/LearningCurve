>>>>>0-1 Knapsack<<<<<
  - n items
  - each item i: value[i], weight[i]
  - capacity of knapsack is C
  - what is max $
  
1. naive enumerate all possible subsets  2^n
  recursion:
    f(i, j) = max $ given first i items and knapsack capacity is j
    here the smaller problem means less items & smaller knapsack
  
  item:
     1                   i
    [                    #]
  for the i-th item, we have two choices:
    take i-th item:
      f(i-1, j-weight[i]) + value[i]  if weight[i]<=j
    not take i-th item:
      f(i-1, j)
      
   we need the maximum value from the two options:
   f(i,j)=max(f(i-1, j-weight[i]) + value[i], f(i-1, j))
   
2. bottom-up
   base case: f(0, j) = f(i,0) = 0
   
   i=0...n  ->col
   j=0...C  ->row
   nC is the answer we want
   
   for(i=1...n):
    for(j=1...C):
        if (weight[i] <= j)
            dp[i,j] = max(dp[i-1, j-weight[i]] + value[i], dp[i-1, j])
        else
            dp[i,j]=dp[i-1,j]   #exceed capacity, do not take
   return dp[n, C]


>>>>>Complete Knapsack<<<<<
  - n types items
  - inf copies of each type
  - for each item of type i, value[i], weight[i]
  - capacity C
  Goal: max return
  
1. recursion:
    f(i) = max return given knapsack w/ capacity i
    
                       i
    [                  #]  #:"last" item in the knapsack
    
    f(i) = max { value[1] + f(i-weight[1])
                 value[2] + f(i-weight[2])
                 ...
                 value[n] + f(i-weight[n])
               }
    base case: f(i) = 0   i<min weight[k]
    
2. dp
     0 1               C
    [                  #]   initialized to 0
    
    for (i=1...C)
      best = 0
      for (k=1...n)
        if(weight[k] <= i)
          best = max(best, value[k] + dp[i-weight[k]])
      dp[i] = best
    return dp[C]
