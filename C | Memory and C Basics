Processor registers
Small number (~16 words) of very fast memory locations located in CPU.

Main memory
Hardware is usually dynamic RAM (data goes away if power is turned off)

Cache memory
Faster than main memory
Might have different levels
Hashtable

Virtual memory
The operating system can pretend it has more memory by swapping out infrequently used blocks of memory to disk, 
and swapping back in needed blocks of memory from disk

Hard disk
persistent memory
In short: program is initially on disks, main memory reads from disks. When CPU tries to run it, it checks if cache already has it.
If no, saves it in cache

sizeof(): operator
When sizeof() is used with the data types, it simply returns the amount of memory(bytes) allocated to that data type. 
The output can be different on different machines like a 32-bit system can show different output 
while a 64-bit system can show different of same data types.

C variables:
name, type, size, address
x     int   4     &x

Pointer:
- A pointer is a variable that stores the address of another variable. 
- (char*)&c: address of c
- 0x%p: print pointer format (some C compilers don’t add it for you. Otherwise omit)
- (char*) (int*) tell C what kinds of format the pointers are
- The “empty” value of a pointer is NULL – initialize pointers and check for NULL
- normal variable int x = 500; (address: 0x1001)
- pointer variable: int* y = &x; (y: 0x1001, points to variable x that contains 500)
- pointer y also has its own address: 0x5142
- To be safe, check if y is NULL before accessing it (check value, size)

Dereferencing:
Once you have a pointer, you want the value it points to
>>> int x = 500;
>>> int* y = &x;
>>> printf (“%d %d\n”, x, *y); 
500 500
*y is the dereferencing, it simply gets the content that it points to
&x get the adresss

C arrays:
- Arrays are sequential locations in memory
- Arrays are typed and homogenous (cant store different types)
- Typing determines how much space is allocated for each element 
- Arrays are fixed in size when declared – no growing or shrinking 
- Access arrays by indexing – starting at 0
- Strings are represented as array of char - with \0 terminating the string
e.g.:
  char d[10]  // this is a string that consists of 10 chars maximum
  d[0] = 'S';
  d[1] = 'i';
  d[2] = '\0'; // final character is NUL (0) which terminates the string, let computer knows that this string is over
  // rest of d not defined, which is allowed
  >>> printf("Our string is |%s|\n",d);
  Our string is |Si|
Above initialisation is same as: char d[10] = {'S', 'i', '\0'};
same as: char d[10] = “Silicon”
#include <string.h> works as import

(void*)&d[i]: void* means we dont know the type

d is actually a pointer(in some way), d[0] is the current element, d[1] is pointer address + 1


Structs
typedef struct Student { 
  int age;
  int id;
  char campus; 
 } Student_type;
 
 - if we dont write Student_type at the end, every time we use struct Student we have to write all of the above
 - typedof creates a new data type called Student_type
 - every var of Student_type has three variables, which can be accessed using "." notation
 
 >>> Student_type myClass[3];
 >>> Student_type* thisStudent;
 >>> thisStudent = &(myClass[0]);
 >>> thisStudent->id    // works same as (*thisStudent).id
 
 
 Stack & Heap
   _______
  |       |  Heap
  |_______| 
  |       |
  |       |
  |_______| Stack
  
  f(x) calls happen in Stack, creates variables in scope of the current program, when f(x) returns, it could not be used again, 
  could be overwritten by other functions, to store the values we use heap to store, like when we new an object we store in heap
  We need to allocate memory in heap and free it after use: malloc(), free() 
  Stack is automatically managed
  
  
Malloc
- malloc takes the number of bytes to allocate as an argument
- malloc returns a pointer to the memory location
int* newInt = (int*)malloc(sizeof(int));  // creates a new int
*newInt = 5;  // assigns values to it
free(newInt);
int* newArray = (int*)malloc(4*sizeof(int));  // creates a new int array
newArray[0] = 3;  // array == pointer 实锤

LinkedList example:
typedof struct node{
  int data;
  struct node *next;    //because node_t has not been seen, we cant use node_t here, but they are the same
  } node_t;
  
node_t *creat_t(){    // a function that returns node_t type
  node_t* temp = malloc(sizeof(node_t));
  return temp;
}


Pass by value
void doSth (int x) {
  x = 9;      // the function creates a copy of int x, so changes to the copy does not affect the original x
}

Pass by reference
void doSthElse (int* x) {
  *x = 9;   // this changes the value that stores in *x this address, which changes the original x
}

void doSthExtra (int* x) {
  x = &i  // this changes x to point to another variable, the address that x holds changes. Now x is the key to i
}









