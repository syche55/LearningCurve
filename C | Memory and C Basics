Processor registers
Small number (~16 words) of very fast memory locations located in CPU.

Main memory
Hardware is usually dynamic RAM (data goes away if power is turned off)

Cache memory
Faster than main memory
Might have different levels
Hashtable

Virtual memory
The operating system can pretend it has more memory by swapping out infrequently used blocks of memory to disk, 
and swapping back in needed blocks of memory from disk

Hard disk
persistent memory
In short: program is initially on disks, main memory reads from disks. When CPU tries to run it, it checks if cache already has it.
If no, saves it in cache

sizeof(): operator
When sizeof() is used with the data types, it simply returns the amount of memory allocated to that data type. 
The output can be different on different machines like a 32-bit system can show different output 
while a 64-bit system can show different of same data types.

C variables:
name, type, size, address
x     int   4     &x

Pointer:
- A pointer is a variable that stores the address of another variable. 
- (char*)&c: address of c
- 0x%p: print pointer format (some C compilers don’t add it for you. Otherwise omit)
- (char*) (int*) tell C what kinds of format the pointers are
- The “empty” value of a pointer is NULL – initialize pointers and check for NULL
- normal variable int x = 500; (address: 0x1001)
- pointer variable: int* y = &x; (y: 0x1001, points to variable x that contains 500)
- pointer y also has its own address: 0x5142
- To be safe, check if y is NULL before accessing it (check value, size)

Dereferencing:
Once you have a pointer, you want the value it points to
>>> int x = 500;
>>> int* y = &x;
>>> printf (“%d %d\n”, x, *y); 
500 500
*y is the dereferencing, it simply gets the content that it points to
&x get the adresss
