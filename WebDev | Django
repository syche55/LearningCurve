manage.py: runs commands
/__init__py: tells python that the folder contains python code
/settings.py: configures the django project
/urls.py: routes web requests based on URL

/apps.py: settings specific for this app
/models.py: schema, data model
/url.py: url routing
/views.py: defines logic and control flow of request, http response
/admin.py: admin interface for the app
/test.py: unit test
/migration.py: migrate(change, add a model, add a field, remove a field)database

init: python3 -m django startproject SPTM
cd SPTM
use: python3 manage.py runserver


MVC Architecture:
URL Patterns        Views         Templates
                      |
                      |
                    Models


-----------------------------------------------------------------------

Models:
name = models.charField(max_length = 10)
submission_date = models.DateTimeField()
sex = models.charField(choices = SEX_CHOICES, blank = True)
age = models.IntegerField(null=True)
vaccinations= models.ManyToManyField('Vaccine', blank = True)

-----------------------------------------------------------------------

Migration:
$ python3 manage.py makemigrations
$ python3 manage.py showmigrations
$ python3 manage.py migrate (this runs all migrations in the project to the current state)
can also run only mirgrations in specific app with specific number using:
$ python3 manage.py migrate <appname> <number>

-----------------------------------------------------------------------

URL Conf Patterns: path converter(a pattern string), view to use, name(optional, used to create links)
urlpatterns=[
  path('', views.home, name = 'home'),
  path('adoptions/<int:pet_id>/', views.pet_detail,               <> capture group, for variables; int: path converter, we are expecting an int; pet_id: keyword arguement
name='pet_detail'),
]

Django checks each pattern in order, if the pattern matches, that view is called
Otherwise, continues to the next pattern
If there is no match-HTTP 404

empty (https://wisdompets.com) ---> home() ---> home.html

-----------------------------------------------------------------------

Template Syntax
{{ variable }}
{% tag %}
{{ variable|filter }}

<h3>{{ pet.name|capfirst }}</h3>

resulting:
<h3>Scooter</h3>

{% for pet in pets %}
  <li>{{ pet.name }}</li>
{% endfor %}

{% url 'home' %}        where the previous section name attribute becomes userful

full example:
<ul>
  {% for pet in pets %}
    <li>
      <a href="{% url 'pet_detail' pet.id %}">
        {{ pet.name|capfirst }}
      </a>
    </li>
  {% endfor %}
</ul>

-----------------------------------------------------------------------

Inheritance: base.html

in home.html:
{% extends "base.html" %}

<body>
  {% block content %}
    <h3>Animals available for adoption</h3>
  
  {% endblock content %}
</body>

more examples:
{% if pet.breed %}                  # previously, pet.breed info is optional
  <p>Breed: {{ pet.breed }}</p>
{% endif %}
<p class="hidden">{{ pet.description }}</p>       # later when add js effect, when hover, the description can be shown
