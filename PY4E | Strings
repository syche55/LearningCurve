"+" concatenate strings

we prefer to read data in using strings and then parse and convert the data as we need
raw input numbers must be converted from strings

b a n a n a
0 1 2 3 4 5
fruit = 'banana'
len(fruit) 

print(index, letter)

fruit = 'banana'
for letter in fruit
    print(letter)
    

slicing:
>>> s = 'Monty Python'
>>> print (s[6:7])
p

[start, end)
if end goes beyond the str, it stops at the end of the str
if we leave off the first number or the last number of the slice, 
it is assumed to be the beginning or end of the string respectively
>>> print(s[8:])
thon
>>> print(s[:2])
Mo
>>> print(s[:]
Monty Python

The in keyword can also be used to check to see if one string is 'in' another string
the in expression is a logical expression that returns True or False and can be used in an if statement
>>> fruit = 'banana'
>>> 'n' in fruit
True
>>> 'm' in fruit
False
>>> if 'a' in fruit:
        print('Found it!')
Found it!

String Comparison:
you can compare strings, to see which word comes in first (depends on your computer setting)

String Library:
inbuilt functions, do not modify the original string, they return a new string that has been altered
>>> print('Hi There'.lower())  <-- object oriented, len(x) is not oo
hi there

>>>dir(string)
shows all methods string is capable of: string.xxx() 

Searching a string: find()
find() finds the first occurence of the substring, if not found, return -1
>>> fruit = 'banana'
>>> pos = fruit.find('na')
>>> print(pos)
2

UPPER CASE lower case: string.upper()  string.lower()
Often when we are searching for a string using find() we first convert the string to lower case 
so we can search for a string regardless of case

Search and Replace: string.replace(search string, replacement string)
it replaces all occurrences of the search string with the replacement string

Stripping Whitespace: tab, newline, also removed
lstrip(): remove whitespace at the left
rstrip(): remove whitespace at the right
strip(): remove both beginning and ending whitespace

Prefixes: string.startswith('x')
>>> line = 'Please have a nice day'
>>> line.startswith('Please')
True
>>> line.startswith('p')
False

Parsing and Extracting
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
>>> data = 'From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008'
>>> atpos = data.find('@')  <-- find the '@' sign
>>> print(atops)
21
>>> sppos = data.find(' ',atpos)  <-- find the next whitespace from the '@' sign
>>> print(sppos)
31
>>> host = data[atpos+1 : sppos]  <-- slicing,[starting from the first cha after the @ sign, stopping at but not including the white space)
>>> print(host)
uct.ac.za
